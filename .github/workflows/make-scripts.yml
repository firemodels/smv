name: Scripts & Make Build
on: [push, pull_request]
env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18418/w_BaseKit_p_2022.1.0.116_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18417/w_HPCKit_p_2022.1.0.93_offline.exe
  LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18445/l_BaseKit_p_2022.1.1.119_offline.sh
  LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18438/l_HPCKit_p_2022.1.1.97_offline.sh
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18341/m_HPCKit_p_2022.1.0.86_offline.dmg
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  LINUX_CPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
  LINUX_FORTRAN_COMPONENTS: intel-oneapi-compiler-fortran
  LINUX_DPCPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp
  LINUX_CPP_COMPONENTS_WEB: intel.oneapi.lin.dpcpp-cpp-compiler-pro
  LINUX_FORTRAN_COMPONENTS_WEB: intel.oneapi.lin.ifort-compiler
  LINUX_DPCPP_COMPONENTS_WEB: intel.oneapi.lin.dpcpp-cpp-compiler
  MACOS_CPP_COMPONENTS: intel.oneapi.mac.cpp-compiler

jobs:
  build-macos:
    name: intel_osx
    strategy:
      fail-fast: false
      matrix:
        lua:
          # - lua
          - no-lua
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: prepare for cache restore
        run: |
          sudo mkdir -p /opt/intel
          sudo chown $USER /opt/intel
      # - name: cache install
      #   id: cache-install
      #   uses: actions/cache@v2
      #   with:
      #     path: /opt/intel/oneapi
      #     key: install2-${{ env.MACOS_HPCKIT_URL }}-${{ env.MACOS_CPP_COMPONENTS }}
      - name: install
        # if: steps.cache-install.outputs.cache-hit != 'true'
        run: bash .github/workflows/install_macos_oneapi.sh $MACOS_HPCKIT_URL
      - name: build smokeview
        shell: bash
        env:
          LUA: ${{ matrix.lua }}
        run: |
          source /opt/intel/oneapi/setvars.sh
          pushd Build/smokeview/intel_osx_64
          if [[ "$LUA" == "lua" ]]; then
            ./make_smokeview_lua.sh
          else
            ./make_smokeview.sh
          fi
          popd
          cp Build/smokeview/intel_osx_64/smokeview_osx_64 smokeview
      - name: Set exec suffix
        if: ${{ matrix.lua }} == lua
        run: echo "exec_suffix=-lua" >> $GITHUB_ENV
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: smokeview-macos${{ env.exec_suffix }}
          path: smokeview
  build-linux-gnu:
    name: gnu_linux
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        lua:
          # - lua
          - no-lua
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build
        shell: bash
        env:
          PLATFORM: ${{ matrix.os }}
          LUA: ${{ matrix.lua }}
        run: |
          sudo apt-get update
          sudo apt-get install build-essential freeglut3-dev libx11-dev libxmu-dev libxi-dev
          pushd Build/smokeview/gnu_linux_64
          if [[ "$LUA" == "lua" ]]; then
            ./make_smokeview_lua.sh
          else
            ./make_smokeview.sh
          fi
          popd
          cp Build/smokeview/gnu_linux_64/smokeview_linux_64 smokeview
      - name: Set exec suffix
        if: ${{ matrix.lua }} == lua
        run: echo "exec_suffix=-lua" >> $GITHUB_ENV
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: smokeview-linux${{ env.exec_suffix }}
          path: smokeview
  build-linux-intel:
    name: intel_linux
    strategy:
      fail-fast: false
      matrix:
        lua:
          # - lua
          - no-lua
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: prepare for cache restore
        run: |
          sudo mkdir -p /opt/intel
          sudo chown $USER /opt/intel
      - name: cache install
        id: cache-install
        uses: actions/cache@v2
        with:
          path: /opt/intel/oneapi
          key: install2-${{ env.LINUX_HPCKIT_URL }}-${{ env.LINUX_CPP_COMPONENTS }}
      - name: install
        if: steps.cache-install.outputs.cache-hit != 'true'
        run: bash .github/workflows/install_linux_oneapi.sh $LINUX_HPCKIT_URL
      - name: build smokeview
        shell: bash
        env:
          LUA: ${{ matrix.lua }}
        run: |
          source /opt/intel/oneapi/setvars.sh
          sudo apt-get update
          sudo apt-get install build-essential freeglut3-dev libx11-dev libxmu-dev libxi-dev
          pushd Build/smokeview/intel_linux_64
          if [[ "$LUA" == "lua" ]]; then
            ./make_smokeview_lua.sh
          else
            ./make_smokeview.sh
          fi
          popd
          cp Build/smokeview/intel_linux_64/smokeview_linux_64 smokeview
      - name: Set exec suffix
        if: ${{ matrix.lua }} == lua
        run: echo "exec_suffix=-lua" >> $GITHUB_ENV
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: smokeview-linux${{ env.exec_suffix }}
          path: smokeview
  build-windows:
    name: intel_win
    strategy:
      fail-fast: false
      matrix:
        lua:
          # - lua
          - no-lua
    runs-on: windows-2019
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # - name: cache install cpp
      #   id: cache-install-cpp
      #   uses: actions/cache@v2
      #   with:
      #     path: C:\Program Files (x86)\Intel\oneAPI
      #     key: install3-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/.github/workflows/cache_exclude_windows.sh') }}
      - name: install cpp
        # if: steps.cache-install-cpp.outputs.cache-hit != 'true'
        run: .github/workflows/install_windows_oneapi.bat $WINDOWS_HPCKIT_URL
      - name: set LUA_SCRIPTING
        shell: bash
        run: echo "LUA_SCRIPTING=false" >> $GITHUB_ENV
      - name: set LUA_SCRIPTING
        if: ${{ matrix.lua }}
        shell: bash
        run: echo "LUA_SCRIPTING=true" >> $GITHUB_ENV
      - name: build libs
        if: matrix.lua != 'lua'
        shell: cmd
        env:
          LUA: ${{ matrix.lua }}
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          pushd Build\LIBS\intel_win_64
          call make_LIBS.bat bot
          dir
          popd
      - name: build libs lua
        if: matrix.lua == 'lua'
        shell: cmd
        env:
          LUA: ${{ matrix.lua }}
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          pushd Build\LIBS\intel_win_64
          call make_LIBS.bat bot lua
          dir
          popd
      - name: build smokeview lua
        if: matrix.lua == 'lua'
        shell: cmd
        env:
          LUA: ${{ matrix.lua }}
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          pushd Build\smokeview\intel_win_64
          call make_smokeview_lua.bat -release
          popd
          copy Build\smokeview\intel_win_64\smokeview_win_64.exe smokeview.exe
      - name: build smokeview
        if:  matrix.lua != 'lua'
        shell: cmd
        env:
          LUA: ${{ matrix.lua }}
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          pushd Build\smokeview\intel_win_64
          call make_smokeview.bat -release
          popd
          copy Build\smokeview\intel_win_64\smokeview_win_64.exe smokeview.exe
      - name: Set exec suffix
        if: ${{ matrix.lua }} == lua
        run: echo "exec_suffix=-lua" >> $GITHUB_ENV
      # - name: exclude unused files from cache
      #   if: steps.cache-install.outputs.cache-hit != 'true'
      #   shell: bash
      #   run: .github/workflows/cache_exclude_windows.sh
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: smokeview-windows${{ env.exec_suffix }}
          path: smokeview.exe
